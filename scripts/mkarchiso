#!/bin/bash

#PKGFILE="$(pwd)/packages.list"
PKGLIST=""
QUIET="n"
FORCE="y"
NOLZMA="n"
#MOUNTFILE="$(pwd)/mounts"
IMG_TYPE="iso"
DELDIR=""
BOOT=""
CDLABEL="Livecd"
PUBLISHER=""
AUTHOR=""
MOVE_MODULES=""
VMLINUZ="boot/vmlinuz26"
PROFILE=$(pwd)
CPIOCONFIG="${PROFILE}/archiso-mkinitcpio.conf"
OVERLAY="${PROFILE}/overlay"
EXCLUDE="${PROFILE}/exclude"
ARCH=i686
#ARCH=x86_64
OS="archlinux"
SLITAZ_LOCALREPO=""

error () { echo -e "\033[1;31;40m!!! \033[1;37;40m$@\033[1;0m"; }
warn ()  { echo -e "\033[1;33;40m*** \033[1;37;40m$@\033[1;0m"; }
info () { echo -e "\033[1;32;40m>>> \033[1;37;40m$@\033[1;0m"; }

KERNEL="/etc/mkinitcpio.d/kernel26.kver"
ROOT_MOD="$(ls -1 ${PROFILE}/list | head -1)"
CDNAME="livecd"
LIVELINUX="../../linux-live/initrd"

if [ -f "${PROFILE}/config" ]; then
	. ${PROFILE}/config
fi

if [ "${NOLZMA}" = "y" ]; then
	EXT="sqfs"
	MKOPTION="-comp gzip"
else
	EXT="lzm"
	MKOPTION="-comp lzma -b 256k"
fi

APPNAME=$(basename "${0}")

# usage: usage <exitvalue>
usage ()
{
	echo "usage ${APPNAME} [options] command <command options>"
	echo " general options:"
	echo "    -f               Force overwrite of working files/squashfs image/bootable image"
	echo "    -i CPIO_CONFIG   Use CONFIG file for mkinitcpio. Default: ${CPIOCONFIG}"
	echo "    -P PROFILE       Used to select the folder of the profile for the livecd. Defualt: $PROFILE "
	#echo "    -p PACKAGE       Additional package to install, can be used multiple times"
	echo "    -n NOLZMA        Use plain squashfs instead of squashfs+lzma."
	echo "    -c CDNAME        The name of the data folder for liblinuxlibe script to look for. Default: ${CDNAME}"
	echo "    -b BOOT		Boot option (syslinux,grub,grub-gfx)"
	echo "    -M MODULES       Modules for livecd. Default: ${MODULES}"
	echo "    -m MODULESCOPY   Copy modules from a folder to modules place in IMGROOT. Default: none"
	echo "    -a ARCH          Set the Arch type. Default: i686"
	echo "    -t <iso,disk>    Type of image to create. Defaults to iso."
	echo "    -v               Enable verbose output."
	echo "    -h               This message."
	echo " commands:"
	echo "     install <working dir>        : install packages to the working dir"
	echo "     overlay <working dir>        : generate the default overlay.sqfs"
	echo "     squash <working dir>         : generate a squashfs image of the installed root"
	echo "     imgprepare <working dir>     : prepare the image"
	echo "     img <working dir> <image name> : build an image from the working directory"
	echo "     all <working dir> <image name> : perform all of the above, in order"
	echo "     livebackup <working dir> <image name> : make livecd of your root (/) system"
	exit $1
}

#while getopts 'i:P:p:a:t:fvh' arg; do
while getopts 'i:P:b:M:m:a:t:c:nfvh' arg; do
	case "${arg}" in
		i) CPIOCONFIG="${OPTARG}" ;;
		P) PROFILE="${OPTARG}" ;;
		#p) PKGLIST="${PKGLIST} ${OPTARG}" ;;
		b) BOOT="${OPTARG}" ;;
		M) MODULES="${OPTARG}" ;;
		m) MODULESCOPY="${OPTARG}" ;;
		a) ARCH="${OPTARG}" ;;
		t) IMG_TYPE="${OPTARG}" ;;
		c) CDNAME="${OPTARG}" ;;
		n) NOLZMA="y" ;;
		f) FORCE="y" ;;
		v) QUIET="n" ;;
		h|?) usage 0 ;;
		*) echo "invalid argument '${arg}'"; usage 1 ;;
	esac
done

#trim spaces
PKGLIST="$(echo $MODULES)"

shift $(($OPTIND - 1))
echo "ARGS: $@"

[ $# -le 1 ] && usage 1

# do UID checking here so someone can at least get usage instructions
if [ "$EUID" != "0" ]; then
	error "error: This script must be run as root."
	exit 1
fi

if [ "${OS}" = "archlinux" ]; then
    if [ -f "${PROFILE}/pacman.conf-${ARCH}" ]; then
        PACMANCONF="${PROFILE}/pacman.conf-${ARCH}"
    else
        PACMANCONF="/etc/pacman.conf"
    fi
fi

command_name="${1}"
work_dir=""
imgname=""

case "${command_name}" in
	install) work_dir="${2}" ;;
	overlay) work_dir="${2}" ;;
	squash) work_dir="${2}" ;;
	imgprepare) work_dir="${2}" ;;
	img) work_dir="${2}"; imgname="${3}" ;;
	all) work_dir="${2}"; imgname="${3}" ;;
	livebackup) work_dir="${2}"; imgname="${3}" ;;
	liveimg) work_dir="${2}"; imgname="${3}" ;;
	*) warn "invalid command name '${command_name}'"; usage 1 ;;
esac

if [ "x${BOOT}" = "x" ]; then BOOT="syslinux"; fi

[ "x${imgname}" = "x" ] && (warn "Bootable image name must be specified" && usage 1)
[ "x${work_dir}" = "x" ] && (warn "please specify a working directory" && usage 1)


info "${APPNAME} : Configuration Settings"
echo "   mkinitcpio config file:   ${CPIOCONFIG}"
#echo "   mount description file:   ${MOUNTFILE}"
echo "                      arch:  ${ARCH}"
echo "           profile folder:   ${PROFILE}"
echo "         pacman.conf file:   ${PACMANCONF}"
echo "                boot menu:   ${BOOT}"
echo "        working directory:   ${work_dir}"
echo "               image name:   ${imgname}"
echo "               image type:   ${IMG_TYPE}"
echo "            squashfs type:   ${EXT}"
sleep 1

IMGROOT="${work_dir}/img"
union="${work_dir}/union"
lastbr="${work_dir}/empty"
moduleplace="${IMGROOT}/${CDNAME}/base"
moduledir="${work_dir}/modules"
INSTROOT="${moduledir}/$(basename ${ROOT_MOD} .list)"
CDROOT="${PROFILE}/cd-root"
buildlog="${work_dir}/log"
packlist="${work_dir}/packlist"
PKGFILE="${IMGROOT}/packages.list"

_kversion ()
{
	if [ -f ${INSTROOT}${KERNEL} ]; then
		source ${INSTROOT}${KERNEL}
		echo ${ALL_kver}
	else
		echo ${ALL_kver}
	fi
}

copy2root()
{
	cp -rp $1/* ${union}
}

remove()
{
	rm -Rf "$@"
	return
}

check_arch()
{
	if [ ! "$(pacman -Q aufs2)" ]; then
		error "Aufs2 needs to be installed."
		exit 1
	elif [ ! "$(pacman -Q aufs2-util)" ]; then
		error "Aufs2-util needs to be installed."
		exit 1
	elif [ ! "$(pacman -Q cdrkit)" ]; then
		error "Cdrkit needs to be installed."
		exit 1
	elif [ ! "$(pacman -Q syslinux)" ]; then
		error "Syslinux needs to be installed."
		exit 1
	fi
}

# mksquash - make squashfs files of modules folder
# mksquash <root folder where modules folders are> <squashfs options>
# ex. mksquash / -keep-as-directory -noappend -ef exclude
mksquash ()
{
	start=$(date +%s)
	local MOD
	local DIR

	for DIR in $MODULES; do
		MOD="$(basename $DIR).${EXT}"
		info "Building module $MOD"
		if [ "${QUIET}" = "y" ]; then
			#/sbin/mksquashfs ${ROOT}/$DIR ${moduleplace}/$MOD -keep-as-directory -noappend -ef exclude ${MKOPTION}> /dev/null
			mksquashfs $1${DIR} ${moduleplace}/$MOD $2 $3 $4 $5 $6 $7 >/dev/null
		else
			#/sbin/mksquashfs ${ROOT}/$DIR ${moduleplace}/$MOD -keep-as-directory -noappend -ef exclude ${MKOPTION}
			mksquashfs $1${DIR} ${moduleplace}/$MOD $2 $3 $4 $5 $6 $7
		fi
		chmod 0755 ${moduleplace}/$MOD
	done
	minutes=$(echo $start $(date +%s) | awk '{ printf "%0.2f",($2-$1)/60 }')
	info "Modules creation done in $minutes minutes."
}

command_livebackup () 
{
	MODULES="bin boot etc home lib opt root sbin srv opt usr var"
	info "Building live backup of root partition"
	if [ -e "${work_dir}" -a "${FORCE}" = "n" ]; then
		error "error: Working dir '${work_dir}' already exists, aborting."
		error "       set FORCE to 'y' to overwrite"
		exit 1
	fi
	
	info "Generating SquashFS image"
	info "Creating modules procede..."
	
	INSTROOT="/"
	mkdir -p "${IMGROOT}"
	#mkdir -p "${INSTROOT}"
	#mkdir -p "${lastbr}"
	#mkdir -p "${union}"
	mkdir -p "${moduleplace}"
	#mkdir -p "${moduledir}"
	mkdir -p ${IMGROOT}/${CDNAME}/{modules,optional,rootcopy}
	touch ${IMGROOT}/${CDNAME}/livecd.sgn
	cp -af ${CDROOT}/* "${IMGROOT}"
	mkdir -p ${IMGROOT}/${CDNAME}/tmp
	
	if [ ! "$(pacman -Qs fbsplash-themes-arch-banner)" ]; then
		error "Fbsplash is not installed. Continuing without it."
	fi
	
	if [ -f "${EXCLUDE}" ]; then
		mksquash / -keep-as-directory -noappend -ef ${EXCLUDE} ${MKOPTION}
	else
		mksquash / -keep-as-directory -noappend ${MKOPTION}
	fi
	
}

slax_initrd()
{
	info "Making compressed initrd ( assuming ../linux-live/initrd/initrd_create )"

	ln -sf ${LIVELINUX} initrd
	cd initrd
	./initrd_create ${CDNAME} $1 $2
	cd ../
	mv -f initrd/base.lzm "${IMGROOT}"
	chmod 0755 "${IMGROOT}/base.lzm"
	rm -f $(pwd)/initrd
}

mkinitramfs()
{
	info "Making bootable image"

	if [ -e "${imgname}" ]; then
		if [ "${FORCE}" = "y" ]; then
			info "Removing existing bootable image..."
			rm -rf "${imgname}"
		else
			error "error: Image '${imgname}' already exists, aborting."
			exit 1
		fi
	fi
	if [ ! -e "${CPIOCONFIG}" ]; then
		error "error: mkinitcpio config '${CPIOCONFIG}' does not exist, aborting."
		exit 1
	fi
	
	info "Generating initcpio for image..."
	if [ "${QUIET}" = "y" ]; then
		#mkinitcpio -c "${CPIOCONFIG}" -k "${kernelver}" -g "${IMGROOT}/boot/initrd.img" >/dev/null
		mkinitcpio $1 $2 $3 $4 $5 $6 $7 $8 > /dev/null
		ret=$?
    	else
		#mkinitcpio -c "${CPIOCONFIG}" -k "${kernelver}" -g "${IMGROOT}/boot/initrd.img"
		mkinitcpio $1 $2 $3 $4 $5 $6 $7 $8
		ret=$?
	fi
	if [ $ret -ne 0 ]; then
		error "error: initcpio image creation failed..."
		exit 1
	fi
}

command_livebackup_imgprepare()
{
	INSTROOT="/"
	slax_initrd

	kernelver=$(_kversion)
	basedir=${INSTROOT}
	[ "${INSTROOT:0:1}" != "/" ] && basedir="$(pwd)/${INSTROOT}"
	mkinitramfs -c "${CPIOCONFIG}" -k "${kernelver}" -g "${IMGROOT}/boot/initrd.img"
}

install_slitaz_union () {
	
	cat "$(pwd)/list/${mod}.list" | grep -v "^#" | while read pkgname; do
		pkgnameorig=$pkgname
		if [ ! -d ${union}/var/lib/tazpkg/installed/${pkgname} ]; then
			if [ -d ${SLITAZ_LOCALREPO} ]; then
				#find -name "${SLITAZ_LOCALREPO}/*.tazpkg" | sed "s|$SLITAZ_LOCALREPO}/||g" > ${SLITAZ_LOCALREPO}/local-packages.list
				basepkg=$(find ${SLITAZ_LOCALREPO}/${pkgname}-[0-9]*.tazpkg 2> /dev/null | tail -1)
				if [  "${basepkg}" != "" ]; then
					info "localpkg ${basepkg}"
					tazpkg install ${basepkg} --root=$(pwd)/${union}  | tee -a ${buildlog}/${mod}-current.log
					#sleep 1
				elif [ "${basepkg}" = "" ]; then
					tazpkg get-install $pkgnameorig --root=$(pwd)/${union} | tee -a ${buildlog}/${mod}-current.log
					#sleep 1
				fi
			else
				tazpkg get-install $pkgnameorig --root=$(pwd)/${union} | tee -a ${buildlog}/${mod}-current.log
				#sleep 1
			fi
		else
			info "${pkgname} installed"
		fi
	done

	find ${union}/lib/modules/${ALL_kver} -name "*.ko.gz" > ${work_dir}/compressed-kernel-modules.list
	cat "${work_dir}/compressed-kernel-modules.list" | while read compressed; do
		lzma-alone d ${compressed} ${compressed%.*} &> /dev/null
	done
	find . -name "*.ko.gz" -exec rm '{}' \;
}

install_arch_union () {

    if [ -e "${union}/var/lib/pacman/db.lck" ]; then
        rm -f ${union}/var/lib/pacman/db.lck
    fi

    mkdir -p "${union}/var/lib/pacman"
    # Remove /var/lib/pacman/local folder in case it just there.
    # This will not remove it if anything is in /var/lib/pacman/local folder. 
    # Only if its a empty folder.
    if [ ! -d "${INSTROOT}/var/lib/pacman/sync/core" ]; then
        pacman -Sy --noprogressbar --noconfirm --config "${PACMANCONF}" -fr "${union}"
        rmdir --ignore-fail-on-non-empty ${INSTROOT}/var/lib/pacman/local
    fi

    if [ -d ${moduledir}/${mod}/var/lib/pacman/local ]; then
        pacman -Q -r ${moduledir}/${mod} > ${packlist}/${mod}.old
        pacman -Su -f --needed --noconfirm --config "${PACMANCONF}" -fr "${union}"
    elif [ ! -d ${moduledir}/${mod}/var/lib/pacman/local ]; then
        touch ${packlist}/${mod}.old

        cat "$(pwd)/list/${mod}.list" | grep -v "^#" | while read pkgname; do
            info "Installing package $pkgname"
            pacman -S -f --needed --noconfirm --config "${PACMANCONF}" -r "$union" $pkgname | tee -a ${buildlog}/${mod}-current.log
            if [ $? -ne 0 ]; then
                warn "Package $pkgname not correctly installed"
                cat ${buildlog}/${mod}-current.log >> ${buildlog}/${mod}-errors.log
            fi
        done

        if [ -e "$(pwd)/list/${mod}.removelist" ]; then
            cat "$(pwd)/list/${mod}.removelist" | grep -v "^#" | while read pkgname; do
                info "Removing package $pkgname"
                pacman -R -d -n --noprogressbar --needed --noconfirm --config "${PACMANCONF}" -r "$union" $pkgname &> /dev/null
            done
        fi
    fi
    
    pacman -Q -r ${moduledir}/${mod} > ${packlist}/${mod}.new

    if [ -f ${packlist}/${mod}.old ]; then
        packagediff.py ${packlist}/${mod}.old ${packlist}/${mod}.new > ${packlist}/${mod}.list
    fi

    # Cleanup
    info "Cleaning up image root files..."
    find "${union}" -name *.pacnew -name *.pacsave -name *.pacorig -delete

    # delete a lot of unnecessary cache/log files
    # We don't have to delete stuff from /usr/share/doc if we are building archpwn module
    if [ "${mod:4:7}" = "archpwn" ]; then
        kill_dirs="var/cache/man var/cache/pacman var/log/* var/mail tmp/ initrd"
    else
        kill_dirs="var/cache/man var/cache/pacman var/log/* var/mail tmp/* initrd ${DELDIR}"
    fi

    for x in ${kill_dirs}; do
        if [ -e "${union}/${x}" ]; then
            rm -Rf "${union}/${x}"
	fi
    done

}

# Go through the main commands in order. If 'all' was specified, then we want
# to do everything. Start with 'install'.
#if [ "${command_name}" = "install" -o "${command_name}" = "all" ]; then
command_install () {
	info "Installing root image"
	if [ -e "${work_dir}" -a "${FORCE}" = "n" ]; then
		error "error: Working dir '${work_dir}' already exists, aborting."
		error "       set FORCE to 'y' to overwrite"
		exit 1
	fi

	mkdir -p "${IMGROOT}"
	mkdir -p "${INSTROOT}"
	mkdir -p "${lastbr}"
	mkdir -p "${union}"
	mkdir -p "${moduleplace}"
	mkdir -p "${moduledir}"
	mkdir -p ${IMGROOT}/${CDNAME}/{modules,optional,rootcopy}
	touch ${IMGROOT}/${CDNAME}/livecd.sgn
	cp -af ${CDROOT}/* "${IMGROOT}"
	mkdir -p ${IMGROOT}/${CDNAME}/tmp

	modprobe aufs
	if [ $? -ne 0 ]; then
		error "Error loading Union filesystem module. (aufs)"
		exit 1
	fi

	mount -t aufs -o br:${lastbr}=rw aufs ${union}
	if [ $? -ne 0 ]; then 
		error "Error mounting $union."
		exit 1
	fi

	if [ -d ${buildlog} ]; then
		rm -R ${buildlog}
	fi
	
	if [ -d ${packlist} ]; then
		rm -R ${packlist}
	fi

	mkdir -p ${buildlog}

	mkdir -p ${packlist}
	
	if [ "${OS}" = "archlinux" ]; then
		# in case of if you have to kill mkarchiso cause of something
		if [ -d "${INSTROOT}/var/lib/pacman/sync" ]; then
			rm -R "${INSTROOT}/var/lib/pacman/sync"
		fi
	fi

	if [ "${OS}" = "slitaz" ]; then
		LOCALSTATE="/var/lib/tazpkg"
		CACHE_DIR="/var/cache/tazpkg"

		mkdir -p ${LOCALSTATE}/installed/
		mkdir -p ${CACHE_DIR}
		if [ "${SLITAZ_UPDATE}" = "yes" ]; then
			tazpkg set-release ${SLITAZ_RELEASE}
		fi
	fi

	for mod in ${MODULES}; do
		mkdir -p "${moduledir}/${mod}"
		info "Adding ${moduledir}/${mod} as top branch of union."
		mount -o remount,add:0:${moduledir}/${mod}=rw aufs ${union}
		info "Adding ${lastbr} as lower branch of union."
		mount -o remount,mod:${lastbr}=rr+wh aufs ${union}
		lastbr="${moduledir}/${mod}"
	
		# Added /dev folder and basic devices nodes
		mkdir -p "${union}/dev"
		mknod ${union}/dev/console c 5 1 >/dev/null
		mknod ${union}/dev/null c 1 3 >/dev/null
		mknod ${union}/dev/zero c 1 5 >/dev/null
		
		if [ "${OS}" = "archlinux" ]; then
			install_arch_union
		elif [ "${OS}" = "slitaz" ]; then
			install_slitaz_union
		fi

		if [ -e "${union}/etc/ld.so.conf" ]; then
			ldconfig -r ${union}
		fi

		if [ -d "${union}/usr/share/icons" ]; then
			remove "${union}/usr/share/icons/hicolor/icon-theme.cache"
			remove "${union}/usr/share/icons/Rodent/icon-theme.cache"
			remove "${union}/usr/share/icons/nuoveXT2/icon-theme.cache"
		fi

		# remove the initcpio images that were generated for the host system
		find "${union}/boot" -name *.img -delete

		if [ -d "${OVERLAY}/home/arch" ]; then
			#chown -R arch:users "${OVERLAY}/home/arch"
			chown -R 1001:100 "${OVERLAY}/home/arch"
			chmod -R 700 "${OVERLAY}/home/arch"
		fi
		
		if [ -d "${OVERLAY}/root" ]; then
			chown -R root:root "${OVERLAY}/root"
			chmod -R 700 "${OVERLAY}/root"
		fi

		# copy over kernel and grub configs for boot
		if [ "$BOOT" = "grub" -o "$BOOT" = "grub-gfx" ]; then
			if [ -e "${union}/boot" -a -e "${OVERLAY}/boot" ]; then
				#rm -rf "${IMGROOT}/boot"
				cp -rf "${union}/boot" "${IMGROOT}"
				cp -rf "${OVERLAY}/boot" "${IMGROOT}"
			fi
		else
			if [ -e "${union}/boot" -a -e "${OVERLAY}/boot" ]; then
				#rm -rf "${IMGROOT}/boot"
				cp -rf "${union}/boot" "${IMGROOT}"
				cp -rf "${OVERLAY}/boot" "${IMGROOT}"
				rm -rf "${IMGROOT}/boot/grub"
			fi
		fi
	done

	if [ -e "$(pwd)/isolinux" ]; then
		cp -r "$(pwd)/isolinux" "${IMGROOT}"
	fi
	if [ "${OS}" = "archlinux" ]; then
		pacman -Q -r ${union} > ${PKGFILE}
	fi

	# Unmount union
	info "Unmounting union."
	umount -l ${union}

	for MODULE in ${MODULES}; do
		if [ -f "$(pwd)/list/rmlocale" ]; then
			cat "$(pwd)/list/rmlocale" | grep -v "^#" | while read rmlocale; do
				if [ -d "${moduledir}/${MODULE}/usr/share/locale/${rmlocale}" ]; then
					info "Removing locale $rmlocale"
					rm -Rf ${moduledir}/${MODULE}/usr/share/locale/${rmlocale}
				fi
			done
		fi
		
		if [ -f "$(pwd)/list/remove" ]; then
			cat "$(pwd)/list/remove" | grep -v "^#" | while read remove; do
				if [ -e "${moduledir}/${MODULE}/${remove}" ]; then
					info "Removing $remove"
					rm -Rf ${moduledir}/${MODULE}/${remove}
				fi
			done
		fi

	done

	info "Updating kernel module dependencies"
	kernelver=$(_kversion)
	depmod -a -b "${INSTROOT}" "${kernelver}"

	# Clean up unionfs whiteout files
	info "Removing unionfs .wh. files."
	find ${moduledir} -type f -name ".wh.*" -exec rm {} \;
	find ${moduledir} -type d -name ".wh.*" -exec rm -rf {} \;

	if [ "${OS}" = "archlinux" ]; then
		info "Removing sync subfolders from modules."
		find ${moduledir}/*/var/lib/pacman/sync -type d -exec rm -rf {} \; 2>/dev/null
	fi

}

command_overlay () {
	# always make an addon out of DEF_CONFIG_DIR
	info "Creating overlay default addon..."

	#find "${OVERLAY}" -name ".svn" -type d > exclude

	if [ "${QUIET}" = "y" ]; then
		mksquashfs "${OVERLAY}" "${IMGROOT}/${CDNAME}/optional/overlay.${EXT}" -noappend ${MKOPTION} >/dev/null
	else
		mksquashfs "${OVERLAY}" "${IMGROOT}/${CDNAME}/optional/overlay.${EXT}" -noappend ${MKOPTION}
	fi

	#rm exclude
	chmod 0755 "${IMGROOT}/${CDNAME}/optional/overlay.${EXT}"
}

command_squash_slitaz () {
	info "Generating SquashFS image"
	info "Creating modules procede..."

        for DIR in $MODULES; do
		MOD="$(basename $DIR).${EXT}"
		if [ ! "$(find "$IMGROOT/$CDNAME" -name "$MOD")" ]; then
			mksquashfs ${moduledir}/$DIR ${moduleplace}/$MOD -noappend ${MKOPTION}
			chmod 0755 ${moduleplace}/$MOD
		fi
	done
}

# Squash is the next step.
command_squash_arch () {
	info "Generating SquashFS image"
	info "Creating modules procede..."

	# edit modules to the ones that updated or changed

	local MOD
	local DIR

	find ${packlist} -size +0 -name "*.list" > ${packlist}/updated.list
	sed -i "s|${packlist}/updated.list||g" ${packlist}/updated.list
	sed -i "s|${packlist}/||g" ${packlist}/updated.list
	sed -i "s|.list||g" ${packlist}/updated.list
	#echo $MODULES > ${packlist}/modules.list
	for DIR in $MODULES; do
		MOD="$(basename $DIR).${EXT}"
		if [ ! "$(find "$IMGROOT/$CDNAME" -name "$MOD")" ]; then
			mksquashfs ${moduledir}/$DIR ${moduleplace}/$MOD -noappend ${MKOPTION}
			# subtrack module in updated.list file if it exist
			if [ $(cat ${packlist}/updated.list | grep $DIR) ]; then
				sed -i "s|$DIR||g" ${packlist}/updated.list
			fi
			chmod 0755 ${moduleplace}/$MOD
		fi
	done
	cat "${packlist}/updated.list" | tr '\n' ' ' > "${packlist}/updated"
	MODULES=$(cat ${packlist}/updated)

	if [ "$MODULES" = "" ]; then
		info "Not build modules"
	else
		mksquash ${moduledir}/ -noappend ${MKOPTION}
	fi

	if [ "${MOVE_MODULES}" != "" ]; then
		for MOD in $MOVE_MODULES; do
			if [ -f "${moduleplace}/${MOD}.${EXT}" ]; then
				mv -f "${moduleplace}/${MOD}.${EXT}" "${IMGROOT}/${CDNAME}/modules/${MOD}.${EXT}"
			else
				error "${moduleplace}/${MOD}.${EXT} doesn't exist. Moving on."
			fi
		done
	fi
	
}

# Finally, make the image.
command_imgprepare () {
	
	kernelver=$(_kversion)
	slax_initrd ${PROFILE}/${INSTROOT} ${kernelver}

	basedir=${INSTROOT}
	[ "${INSTROOT:0:1}" != "/" ] && basedir="$(pwd)/${INSTROOT}"
	mkinitramfs -c "${CPIOCONFIG}" -b "${basedir}" -k "${kernelver}" -g "${IMGROOT}/boot/initrd.img"

}

command_img () {

	# Here we copy packages .lzm modules to the correct location
	if [ -d "${MODULESCOPY}" ]; then
		info "Copying modules ..."
		cp -rf ${MODULESCOPY}/* "${IMGROOT}/${CDNAME}/modules/"
		chmod 0755 "${IMGROOT}/${CDNAME}/modules/"
	elif [ -d modules ]; then
		info "Copying modules ..."
		cp -rf modules/* "${IMGROOT}/${CDNAME}/modules/"
		chmod 0755 "${IMGROOT}/${CDNAME}/modules/"
	fi
	bootflags=""
	if [ "$BOOT" = "grub" -o "$BOOT" = "grub-gfx" ]; then
		tst=0
		pacman -Q grub >/dev/null 2>&1
		tst=$(($tst + $?))
		pacman -Q grub-gfx >/dev/null 2>&1
		tst=$(($tst + $?))
		if [ $tst -ge 2 ]; then
			error "grub or grub-gfx not found on host system. Cannot install!"
			exit 1
		fi
	
		mkdir -p "${IMGROOT}/boot/grub"
		cp -r /usr/lib/grub/i386-pc/* "${IMGROOT}/boot/grub"

		bootflags="-b boot/grub/stage2_eltorito"
	elif [ "$BOOT" = "syslinux" ]; then
		if [ "${OS}" = "archlinux" ]; then
			if ! pacman -Qi syslinux >/dev/null 2>&1; then
				error "$BOOT not found on host system. Cannot install!"
				exit 1
			fi
		fi

		mkdir -p "${IMGROOT}/boot/isolinux"
		if [ -d /usr/lib/syslinux ]; then
			cp /usr/lib/syslinux/* "${IMGROOT}/boot/isolinux"
		fi
		
		# DO NOT REMOVE
		# Its used for livebackup option even though INSTROOT will be null
		if [ -f "${INSTROOT}/${VMLINUZ}" ]; then
			cp -f "${INSTROOT}/${VMLINUZ}" "${IMGROOT}/boot/vmlinuz"
		fi
		
		if [ -f "${IMGROOT}/${VMLINUZ}" ]; then
			mv -f "${IMGROOT}/${VMLINUZ}" "${IMGROOT}/boot/vmlinuz"
		fi
		
		bootflags="-b boot/isolinux/isolinux.bin -c boot/isolinux/boot.cat"
	else
		error "No bootloader specified. Use the -b flag to specify"
		info "  Supported Bootloaders:"
		info "     grub"
		info "     grub-gfx"
		info "     isolinux"
		exit 1
	fi

	if [ "$IMG_TYPE" == "disk" ]; then
		info "Creating DISK image..."
		mkusbimg "${IMGROOT}" "${imgname}"
	elif [ "$IMG_TYPE" = "iso" ]; then
		info "Creating ISO image..."
		qflag=""
		#[ "${QUIET}" = "y" ] && qflag="-q"
		mkisofs ${qflag} -v -J -R -D -r -l $bootflags -uid 0 -gid 0 \
		-input-charset utf-8 -p "${AUTHOR}" \
		-no-emul-boot -boot-load-size 4 -boot-info-table \
		-publisher "${PUBLISHER}" \
		-A "${CDLABEL}" -V "${CDLABEL}" \
		-o "${imgname}" "${IMGROOT}"
		# This adds USB support
		isohybrid "${imgname}"
		md5sum "${imgname}" > "${imgname}".md5
	else
		error "Invalid image type '$IMG_TYPE' specified"
		exit 1
	fi
}

    if [ "${command_name}" = "install" -o "${command_name}" = "all" ]; then
        #check_arch
        command_install
    fi

    if [ "${command_name}" = "overlay" -o "${command_name}" = "all" ]; then
        #check_arch
        command_overlay
    fi

if [ "${OS}" = "archlinux" ]; then
    if [ "${command_name}" = "squash" -o "${command_name}" = "all" ]; then
        #check_arch
        command_squash_arch
    fi

    if [ "${command_name}" = "imgprepare" -o "${command_name}" = "all" ]; then
        #check_arch
        command_imgprepare
    fi

    if [ "${command_name}" = "img" -o "${command_name}" = "all" ]; then
	#check_arch
	command_img
    fi

    if [ "${command_name}" = "livebackup" ]; then
        check_arch
        command_livebackup
        if [ -d "${OVERLAY}" ]; then
            command_overlay
	fi
        command_livebackup_imgprepare
        command_img
    fi

    if [ "${command_name}" = "liveimg" ]; then
        check_arch
        if [ -d "${OVERLAY}" ]; then
            command_overlay
        fi
        command_livebackup_imgprepare
        command_img
    fi
elif [ "${OS}" = "slitaz" ]; then
    if [ "${command_name}" = "squash" -o "${command_name}" = "all" ]; then
        #check_arch
        command_squash_slitaz
    fi

    if [ "${command_name}" = "imgprepare" -o "${command_name}" = "all" ]; then
        #check_arch
        command_imgprepare
    fi

    if [ "${command_name}" = "img" -o "${command_name}" = "all" ]; then
	#check_arch
	command_img
    fi
fi

# vim:ts=4:sw=4:et:
