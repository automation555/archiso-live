#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2008-2009 Francesco Piccinno
#
# Author: Francesco Piccinno <stack.box@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

import os
import os.path

import sys
import shutil

from optparse import OptionParser

from pylibs.pkgbuild import PkgBuild
from pylibs.utils import Animator, ConsoleP, RNode, foreach_pkgbuild, escape_deps

anim = Animator()

class ModuleRebuild(ConsoleP):
    def __init__(self, absdir, regendir, kver, all=False):
        ConsoleP.__init__(self, 'modulerebuild')

        self.absdir = os.path.abspath(absdir)
        self.regendir = os.path.abspath(regendir)

        if not kver:
            kver = os.popen('uname -r').read().strip()
            kver = kver.replace('ARCH', 'pwn')

        self.kver = kver

        if not all:
            self.graph = {}
            self.create_dep_graph('kernel26')
            self.print_deps('kernel26')

        else:
            # We have only to do text processing over PKGBUILD
            # located under self.regendir

            self.info("Regenarating all packages:")

            for pkgdir in foreach_pkgbuild(self.absdir):
                try:
                    pbuild = PkgBuild(os.path.join(pkgdir, 'PKGBUILD'))
                    pname = pbuild.get('pkgname')

                    self.add_pkg(RNode(pname, pkgdir))

                except Exception, err:
                    self.error("An error has occurred while processing a PKGBUILD in regendir")
                    self.error("Error: '%s' Give a look to %s/PKGBUILD" % (str(err), pkgdir))
                    continue

    def print_deps(self, root):
        self.info('These are the packages that depends on kernel26')

        skipped = (
            'madwifi',
            'openswan-klips',

            # Unused
            'archboot',
            'acerhk',
            'lirc',
            'kqemu',

            # Modems? :D
            'fcpci',
            'fcpcmcia',
            'intel-536ep',
            'intel-537',
            'martian',
            'slmodem',

            # Misc
            'pyinotify',
            'speakup',

            # Compilation error or version mismatch
            'nilfs',
            'shfs',
            'qc-usb',
            'qc-usb-messenger',
            'em8300',
            'open-vm-tools-modules',
            'virtualbox-ose-additions-modules',

            # uname -r in install process.
            'cdfs',
            'vhba-module',
            'nouveau-drm',

            # Patched modules
            'tiacx',
        )

        forced = (
            # 'aufs2-util',
        )

        for child in self.graph['kernel26']:
            if child.pname == 'kernel26':
                continue

            if child.pname in skipped:
                continue

            self.add_pkg(child)

        for force in forced:
            self.add_pkg(self.graph[force])

    def add_pkg(self, child):
        self.write(child.pname)

        origdir = os.path.join(child.pdir)
        dirname = os.path.abspath(os.path.join(self.regendir, child.pname))

        if os.path.exists(dirname):
            shutil.rmtree(dirname, True)

        shutil.copytree(child.pdir, dirname)

        # We have copied now we have to do text
        # substitutions inside PKGBUILD, and .install files

        self.text_processing(dirname)

    def text_processing(self, dirname):
        # We use sed command against various files
        # because it's the more rapid approach

        sep = '\(\'\|\\"\)*'

        for file in os.listdir(dirname):
            if file == 'PKGBUILD':
                path = os.path.join(dirname, file)

                os.system('sed -i "s:\(_kernelver=%s\)\\`uname -r\\`:\\1%s:g" %s' % (sep, self.kver, path))
                os.system('sed -i "s:^\(_kernver=%s\).*-ARCH:\\1%s:g" %s' % (sep, self.kver, path))
                os.system('sed -i "s:\(kernelver=%s\).*-ARCH:\\1%s:g" %s' % (sep, self.kver, path))
                os.system('sed -i "s:\(KERNEL_VERSION=%s\).*-ARCH:\\1%s:g" %s' % (sep, self.kver, path))

            elif file.endswith('.install'):
                os.system('sed -i "s|\(KERNEL_VERSION=%s\).*-ARCH|\\1%s|g" %s' \
                          % (sep, self.kver, os.path.join(dirname, file)))

    def create_dep_graph(self, root='kernel26'):
        idx = 0
        self.graph = {root : RNode(root)}

        for pkgdir in foreach_pkgbuild(self.absdir):
            try:
                pbuild = PkgBuild(os.path.join(pkgdir, 'PKGBUILD'))

                pname = pbuild.get('pkgname')
                pdeps = pbuild.get('depends')

                idx += 1

                if idx % 5 == 0:
                    anim.update("Parsing %d PKGBUILDs ..." % idx)

                if not pdeps or not pname:
                    continue

                if pname in self.graph:
                    node = self.graph[pname]
                    node.pdir = pkgdir
                else:
                    node = RNode(pname, pkgdir)
                    self.graph[pname] = node

                node.pdir = pkgdir

                for dep in escape_deps(pdeps):
                    child = None
                    if dep in self.graph:
                        child = self.graph[dep]
                    else:
                        child = RNode(dep)
                        self.graph[dep] = child

                    node.add_dep(child)

            except KeyError, err:
                print pkgdir, err
                continue
            except Exception, err:
                print pkgdir, err
                continue

        anim.stop("Parsing %d PKGBUILDs ... DONE" % idx)

if __name__ == '__main__':
    parser = OptionParser(usage='%s [OPTIONS] <absdir> <regendir>' % sys.argv[0])
    parser.add_option('-a', '--all',
                      action='store_true', dest='all', default=False,
                      help="Don't look for kernel26 dep graph. Regen all PKGBUILD contained in the absdir")
    parser.add_option('-k', '--kver', dest='kver', default=None,
                      help="Kernel revision to use (Default will be `uname -r`)")
    (options, args) = parser.parse_args()

    if len(args) == 2:
        rebuild = ModuleRebuild(args[0], args[1], options.kver, options.all)
    else:
        parser.print_help()
        sys.exit(-1)
