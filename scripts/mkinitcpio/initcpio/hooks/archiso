#args: source, mountpoint
_mnt_bind() {
    msg "Binding ${1} to ${2}"
    mkdir -p /real_root${2}
    mount -o bind ${1} /real_root${2}
}

_mnt_iso() {
	img="${1}"
	
	msg "Mounting ${img}"
	modprobe -q loop max_loop=255 >/dev/null 2>&1
	
	#/bin/mkdir -p "/tmpfs/mnt/loop${LOOP_NUM}"
	mkdir -p "/tmpfs/mnt/findiso"
    while [ ! -e "/dev/loop10" ]; do
        sleep 1
    done
    if ! losetup "/dev/loop10" ${img} > /dev/null 2>&1; then
        err "Cannot mount loop device /dev/loop${LOOP_NUM}"
        break
    fi
    mount -t iso9660 "/dev/loop10" "/tmpfs/mnt/findiso"

    #export LOOP_NUM=$(( $LOOP_NUM + 1 ))
}

# args: /path/to/image_file, mountpoint
_mnt_squashfs() {
    img="${1}"
    base_img="/tmp/$(basename ${img})";
    #mnt="${2}"

    msg "Adding new real_root branch: ${base_img}"
    modprobe -q loop max_loop=255 >/dev/null 2>&1

    if [ "${copy2ram}" = "y" ]; then
        msg "Copying squashfs image to RAM"
        mkdir -p /tmp
        mount -t tmpfs -o "size=6M" tmpfs /tmp
        cp -f ${img} ${base_img}
        img="${base_img}"
    fi

    mkdir -p "/tmpfs/mnt/loop${LOOP_NUM}"
    while [ ! -e "/dev/loop${LOOP_NUM}" ]; do
        sleep 1
    done
    if ! losetup "/dev/loop${LOOP_NUM}" ${img} > /dev/null 2>&1; then
        err "Cannot mount loop device /dev/loop${LOOP_NUM}"
        break
    fi
    mount -r -t squashfs "/dev/loop${LOOP_NUM}" "/tmpfs/mnt/loop${LOOP_NUM}"

    mount -t aufs -o remount,add:1:/tmpfs/mnt/loop${LOOP_NUM}=rr aufs "/real_root"
    export LOOP_NUM=$(( $LOOP_NUM + 1 ))
}

_mnt_changes () {
	changes="$1"
	#fstype="$2"
	found=0
	msg "finding changes folder..."
	for device in /dev/sd[a-z][0-9]; do
		[ ! -e "${device}" ] && continue
		FSTYPE=$(blkid -o value -s TYPE ${device})
		changesmnt="$(_device_mountdir ${device})"
        mkdir -p "${changesmnt}"
        if [ ${FSTYPE} != vfat -o ${FSTYPE} != ntfs ]; then
			if mount -t ${FSTYPE} "${device}" "${changesmnt}" >/dev/null 2>&1; then
				if [ -d "${changesmnt}/$(basename ${changes})" ]; then
					found=1
					msg "${device}"; echo
					CHANGES_MOUNT="${changesmnt}"
					break
				fi
			else
				#msg "uhm"; echo
				err "Failed to mount changes ${device}"
			fi
		else
			err "Not the right filesystem type.Use memory."
		fi
        [ ${found} -eq 0 ] && umount "${changesmnt}" >/dev/null 2>&1
	done
	export CHANGES_MOUNT
}

_mount_tmpfs () {
    #if [ "x${ramdisk_size}" = "x" ]; then
        ramdisk_size="3M"
    #fi
    msg "Mounting tmpfs, size=${ramdisk_size}... "
    mount -t tmpfs -o "size=${ramdisk_size}" tmpfs /tmpfs
    msg "done."; echo
}

_device_mountdir() {
   echo "/tmpfs/mnt/$(basename "$1")"
}

run_hook () {
	export LOOP_NUM="0"

    _mount_tmpfs

    # external drives may need to settle
    msg "Waiting for devices to settle..."
    /sbin/udevadm trigger --subsystem-match=usb
    /sbin/udevadm settle
    usbdelay=$(( ${usbdelay:-0} + 1 ))
    msg "Waiting ${usbdelay}s for USB devices"
    sleep "${usbdelay}"

    found=0
    
    modprobe -q isofs >/dev/null 2>&1
    modprobe -q ext4 >/dev/null 2>&1
    msg -n "Scanning drives: "
    for device in /dev/hd[a-z] /dev/sr[0-9]* /dev/scd[a-z] /dev/sg[0-9]* /dev/sd[a-z][0-9]; do
		[ ! -e "${device}" ] && continue
        FSTYPE=$(blkid -o value -s TYPE ${device})
        bootmnt="$(_device_mountdir ${device})"
        mkdir -p "${bootmnt}"
    	if mount -t ${FSTYPE} "${device}" "${bootmnt}" >/dev/null 2>&1; then
    	    if [ -f "${bootmnt}/${findiso}" ]; then
                found=1
                msg "${device}"; echo
                BOOT_MOUNT="${bootmnt}"
                break
            elif [ "x${from}" != "x" ]; then
                from=$(basename ${from})
                if [ -f "${bootmnt}/${from}/base.lzm" ]; then
                    found=1
                    msg "${device}"; echo
                    BOOT_MOUNT="${bootmnt}"
                    break
                fi
            else
                if [ -f "${bootmnt}/base.lzm" ]; then
                    found=1
                    msg "${device}"; echo
                    BOOT_MOUNT="${bootmnt}"
                    break
                fi
            fi   
        else
            msg "uhm"; echo
            err "Failed to mount ${device}"
        fi
        [ ${found} -eq 0 ] && umount "${bootmnt}" >/dev/null 2>&1
    done

    if [ ${found} -eq 0 ]; then
        err "cannot find boot device, cannot continue..."
        msg "Falling back to interactive prompt"
        PS1="ramfs$ " /bin/sh -i
        exit 1
    fi

    if [ "${break}" = "y" ]; then
        msg "Break requested, type 'exit' to resume operation"
        PS1="ramfs$ " /bin/sh -i
    fi

    modprobe -q squashfs >/dev/null 2>&1
    modprobe -q aufs brs=1 >/dev/null 2>&1
    XINO=xino
    MEMORY=memory
    if [ "$XINO" != "$MEMORY" ]; then
    	mkdir -p $XINO
    	mount -n -t tmpfs tmpfs $XINO
    fi

    mount -t aufs -o nowarn_perm,xino=$XINO/.aufs.xino,br:/tmpfs=rw aufs /real_root
    if [ $? -ne 0 ]; then
        err "while mounting root (aufs) fileystem."
        exit 1
    fi

    if [ "x${findiso}" != "x" ]; then
        if [ -f "${BOOT_MOUNT}/${findiso}" ]; then
            _mnt_iso "${BOOT_MOUNT}/${findiso}"
            BOOT_ORIG="${BOOT_MOUNT}"
            BOOT_MOUNT="/tmpfs/mnt/findiso"
        fi

        if [ -f "${BOOT_MOUNT}/base.lzm" ]; then
            _mnt_squashfs "${BOOT_MOUNT}/base.lzm"
        elif [ -f "${BOOT_MOUNT}/initrd.lzm" ]; then
            _mnt_squashfs "${BOOT_MOUNT}/initrd.lzm"
        fi
    elif [ "x${from}" != "x" ]; then
       _mnt_squashfs "${BOOT_MOUNT}/${from}/base.lzm"
    else
       _mnt_squashfs "${BOOT_MOUNT}/base.lzm"
    fi
    
    echo "aufs / aufs defaults 0 0" > /real_root/etc/fstab
    mount -o move ${BOOT_MOUNT} /real_root/mnt/$(basename ${BOOT_MOUNT})
    if [ "x${findiso}" != "x" ]; then
        mount -o move ${BOOT_ORIG} /real_root/mnt/$(basename ${BOOT_ORIG})
    fi
    
    if [ "x${changes}" != "x" ]; then
		_mnt_changes ${changes}
		mkdir -p /real_root/mnt/$(basename ${CHANGES_MOUNT}) >/dev/null 2>&1
		mount -o move ${CHANGES_MOUNT} /real_root/mnt/$(basename ${CHANGES_MOUNT})
    fi
    
    if [ "${break}" = "y" ]; then
        msg ":: Break requested, type 'exit' to resume operation"
        PS1="ramfs$ " /bin/sh -i
    fi
		
    ROOT=/real_root
    mkdir -p $ROOT/dev 2>&1 >/dev/null
    mknod $ROOT/dev/console c 5 1 2>&1 >/dev/null
    mknod $ROOT/dev/null c 1 3 2>&1 >/dev/null
    mknod $ROOT/dev/zero c 1 5 2>&1 >/dev/null

    #Special handling if udev is running
    udevpid=$(/bin/pidof udevd)
    if [ -n "${udevpid}" ]; then
        /bin/kill -9 ${udevpid} > /dev/null 2>&1
        /bin/sleep 0.01
    fi
    msg ":: Passing control to Linux-Live Initrd...Please Wait"
    umount -l /sys
    umount -l /proc
    sleep 2
    exec /sbin/switch_root -c /dev/console /real_root /sbin/init
}

# vim:ft=sh:ts=4:sw=4:et:
