#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2008-2009 Francesco Piccinno
#
# Author: Francesco Piccinno <stack.box@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

import os
import os.path
import re
import sys
import shutil
import glob

from optparse import OptionParser
from pylibs.utils import ConsoleP, foreach_pkgbuild
from pylibs.pkgbuild import PkgBuild
from subprocess import Popen, STDOUT, PIPE

SKEL = """# This file is autogenerated by pkg-builder

DLAGENTS=('ftp::/usr/bin/wget -c --passive-ftp -t 3 --waitretry=3 -O %o %u'
          'http::/usr/bin/wget -c -t 3 --waitretry=3 -O %o %u'
          'https::/usr/bin/wget -c -t 3 --waitretry=3 --no-check-certificate -O %o %u'
          'rsync::/usr/bin/rsync -z %u %o'
          'scp::/usr/bin/scp -C %u %o')
CARCH="i686"
CHOST="i686-pc-linux-gnu"
CFLAGS="-march=i686 -mtune=generic -O2 -pipe -fomit-frame-pointer"
CXXFLAGS="-march=i686 -mtune=generic -O2 -pipe -fomit-frame-pointer"
MAKEFLAGS="-j%NCPU%"
BUILDENV=(fakeroot !distcc color ccache !xdelta)
OPTIONS=(strip docs libtool emptydirs zipman)
INTEGRITY_CHECK=(md5)
DOC_DIRS=(usr/{,share/}{info,doc,gtk-doc} opt/*/{info,doc,gtk-doc})
STRIP_DIRS=(bin lib sbin usr/{bin,lib,sbin,local/{bin,lib,sbin}} opt/*/{bin,lib,sbin})
PKGDEST="%PKGDEST%"
SRCDEST="%SRCDEST%"
PACKAGER="Francesco Piccinno <stack.box@gmail.com>"
BUILDSCRIPT='PKGBUILD'
PKGEXT='.pkg.tar.gz'
SRCEXT='.src.tar.gz'
DB_COMPRESSION='gz'
DB_CHECKSUMS=(md5)

# vim: set ft=sh ts=2 sw=2 et:
"""

OUTFILE = os.path.join(os.getenv("HOME", "/root"), ".makepkg.conf")

class Builder(ConsoleP):
    def __init__(self, src, tmp, dst, nodeps=False, force=False):
        ConsoleP.__init__(self, 'pkgbuilder')

        self.built = 0
        self.failed = []

        self.src, self.tmp, self.dst = os.path.abspath(src), \
                                       os.path.abspath(tmp), \
                                       os.path.abspath(dst)


        # We have to create a makepkg.conf file that contains
        # proper CFLAGS and PKGDEST, SRCDEST variable (dst, tmp)
        # and place under ~/.makepkg.conf

        mkp = SKEL.replace("%NCPU%", "3") \
                  .replace("%PKGDEST%", self.dst) \
                  .replace("%SRCDEST%", self.tmp)

        self.nodeps = nodeps
        self.force = force

        f = open(OUTFILE, "w+")
        f.write(mkp)
        f.close()

    def build_all(self):
        st_size = os.stat('/var/log/pacman.log').st_size

        for pkgdir in foreach_pkgbuild(self.src):
            rootdir = os.path.basename(pkgdir)

            if 'lkm-skel' in pkgdir:
                continue

            self.build_pkg(pkgdir)

        f = open('/var/log/pacman.log', 'r')
        f.seek(st_size)
        installed = f.read()
        f.close()

        packs = re.findall(
            r"\[\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}\]\s(\w+)\s([^\s]+)\s(.*)$",
            installed, re.MULTILINE)
        packs = map(lambda x: x[1], filter(lambda x: x[0] == 'installed', packs))

        if packs:
            self.info('These packages were installed as dependencies ' \
                      'and will be dropped:')
            self.info('%s' % packs)
            os.system('sudo pacman -Rd %s' % ' '.join(packs))

    def create_repo(self):
        if self.built == 0:
            return

        origdir = os.getcwd()

        os.chdir(self.dst)
        os.system("repo-add archpwn.db.tar.gz %s > /dev/null 2>&1" % \
                  " ".join(glob.glob("*.pkg.tar.gz")))
        self.info("archpwn.db succesfully updated.")

        os.chdir(origdir)
        os.system("sudo pacman -Sy --config scripts/archpwn-pacman.conf")
        self.info("archpwn.db succesfully synced.")

    def build_pkg(self, dir_path):
        dir = os.path.basename(dir_path)

        try:
            outfile = PkgBuild(os.path.join(dir_path, "PKGBUILD")).get_output()
        except:
            self.error("Problem while building %s (PKGBUILD malformed)" % dir)
            return

        if not self.force and os.path.isfile(os.path.join(self.dst, outfile)):
            self.info("Package %s already built" % dir)
            return

        self.info("Building package %s" % dir)

        origdir = os.path.abspath(os.getcwd())
        logf = open(os.path.join(origdir, 'logs', 'build_%s.log' % dir), 'w')

        os.chdir(dir_path)

        mkpkg = "makepkg --noconfirm -s%s%s" % (
            (self.force) and " -f" or "",
            (self.nodeps) and " -d" or "")

        ret = None

        env = os.environ
        env['LC_ALL'] = 'C'

        proc = Popen(mkpkg, env=env, shell=True, stdout=PIPE, stderr=STDOUT)

        try:
            while ret is None:
                buff = os.read(proc.stdout.fileno(), 1024)

                if buff:
                    sys.stdout.write(buff)
                    sys.stdout.flush()

                    logf.write(buff)

                ret = proc.poll()

        except KeyboardInterrupt:
            proc.kill()
            ret = -1
            self.warning("makepkg process killed.")

        logf.close()

        # Cleaning up the dir by removing 'pkg' and 'src' directories
        shutil.rmtree("src", True)
        shutil.rmtree("pkg", True)

        # Restore original directory
        os.chdir(origdir)

        if ret != 0:
            self.error("Error building %s. (Error status: %d)" % (dir, ret))
            self.warning("Take a look to logs/build_%s.log" % dir)
            self.failed.append(dir)
        else:
            self.built += 1
            output = os.path.join(self.dst, outfile)

            if os.system("namcap %s > logs/namcap_%s.log" % (output, dir)):
                self.warning("Namcap has detected some problems. Take "
                             "a look to logs/namcap_%s.log" % dir)

if __name__ == "__main__":
    parser = OptionParser(usage="%s [options] <repodir> <srcdest> <pkgdest>" % sys.argv[0])

    parser.add_option("-d", "--nodeps",
                      action="store_true", dest="nodeps", default=False,
                      help="don't include dependecy checking")
    parser.add_option("-f", "--force",
                      action="store_true", dest="force", default=False,
                      help="force rebuild if package is already present")

    (options, args) = parser.parse_args()

    if len(args) != 3:
        parser.print_help()
        sys.exit(-1)

    builder = Builder(args[0], args[1], args[2], \
                      options.nodeps, options.force)

    builder.build_all()
    builder.create_repo()

    if builder.failed:
        builder.warning("Not all packages have been generated successfully.")
        builder.warning("These are the missing: %s" % str(builder.failed))

    os.remove(OUTFILE)
