#!/bin/bash
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

FORCE="n"
RUN=""
MAKEPKG_ARGS="-sr"
REPACK=""
WORKDIR=$PWD
clean_first="0"
install_pkg=""

chrootdir="$CHROOT_SHELL"

APPNAME=$(basename "${0}")

usage ()
{
    echo "usage ${APPNAME} [-h] [-c] [-r CHROOT_SHELL] [--] [makepkg args]"
    echo " Run this script in a PKGBUILD dir to build a package inside a"
    echo " clean chroot. All unrecognized arguments passed to this script"
    echo " will be passed to makepkg."
    echo ""
    echo "The \$CHROOT_SHELL environment variable is used to determine where"
    echo " your chroot shell is. The shell consists of the following"
    echo " directories: \$CHROOT_SHELL/{root, rw, union} but only 'root' is"
    echo " required by default. The rest will be created as needed"
    echo ""
    echo "The -c flag, if specified, will remove all files created by previous"
    echo "builds using makechrootpkg.  This will ensure a clean chroot is used."
    echo ""
    echo "The chroot shell 'root' directory must be created via the following"
    echo "command:"
    echo "    mkarchroot \$CHROOT_SHELL/root base base-devel sudo"
    echo ""
    echo "If you have problems passing params to makepkg or need to pass long"
    echo "options, put -- between the makechrootpkg args and the makepkg args"
    echo ""
    echo "Default makepkg args: $MAKEPKG_ARGS"
    exit 1
}

while getopts ':r:i:h:c' arg; do
    case "${arg}" in
        r) chrootdir="$OPTARG" ;;
        i) install_pkg="$OPTARG" ;;
        c) clean_first=1 ;;
        h|?) usage ;;
        *) MAKEPKG_ARGS="$MAKEPKG_ARGS -$arg $OPTARG" ;;
    esac
done

#Get rid of trailing / in chrootdir
[ "$chrootdir" != "/" ] && chrootdir=$(echo $chrootdir | sed 's#/$##')

# Pass all arguments after -- right to makepkg
MAKEPKG_ARGS="$MAKEPKG_ARGS ${*:$OPTIND}"

# See if -R was passed to makepkg
for arg in ${*:$OPTIND}; do
    if [ "$arg" = "-R" ]; then
        REPACK=1
        break;
    fi
done

if [ "$EUID" != "0" ]; then
    echo "This script must be run as root."
    exit 1
fi

if [ ! -f PKGBUILD ]; then
    echo "This must be run in a directory containing a PKGBUILD."
    exit 1
fi
source PKGBUILD

if [ ! -d "$chrootdir" ]; then
    echo "No \$CHROOT_SHELL defined, or invalid path ($chrootdir)"
    exit 1
fi

if [ ! -d "$chrootdir/root" ]; then
    echo "Missing \$CHROOT_SHELL root directory."
    echo "Try using: mkarchroot \$CHROOT_SHELL base base-devel sudo"
    usage
fi

[ -d "$chrootdir/rw" -a "$clean_first" -eq "1" ] && rm -rf "$chrootdir/rw/" 
[ -d "$chrootdir/rw" ] || mkdir "$chrootdir/rw"
[ -d "$chrootdir/union" ] || mkdir "$chrootdir/union"

cleanup ()
{
    echo "cleaning up unioned mounts"
    umount "$chrootdir/union/pkgdest" 2>/dev/null
    umount "$chrootdir/union/srcdest" 2>/dev/null
    umount "$chrootdir/union"
}

uniondir="$chrootdir/union"
echo "building union chroot"
grep -Fq aufs /proc/filesystems
if [ $? -ne 0 ]; then
    modprobe -q aufs
    if [ $? -ne 0 ]; then
        echo "ERROR: No aufs available. Abandon ship!" && exit 1
    fi
fi
mount -t aufs -o "br:$chrootdir/rw=rw:$chrootdir/root" aufs "$uniondir"
trap 'cleanup' 0 1 2 15

if [ -n "$install_pkg" ]; then
    pkgname="$(basename "$install_pkg")"
    echo "installing '$pkgname' in chroot"
    cp "$install_pkg" "$uniondir/$pkgname"
    mkarchroot -r "pacman -U /$pkgname" "$uniondir"
    ret=$?
    rm "$uniondir/$pkgname"
    #exit early, we've done all we need to
    exit $ret
fi

echo "moving build files to chroot"
[ -d "$uniondir/build" ] || mkdir "$uniondir/build"

if [ "$REPACK" != "1" ]; then
    #Remove anything in there UNLESS -R (repack) was passed to makepkg
    rm -rf "$uniondir/build/"*
fi

# Copy makepkg.conf and ~/.makepkg.conf into the chroot so packager has
# all their custom variables set.
if [ -r "/etc/makepkg.conf" ]; then
  rm $uniondir/etc/makepkg.conf
  cp /etc/makepkg.conf $uniondir/etc/makepkg.conf
fi
if [ -r ~/.makepkg.conf ]; then
  cat ~/.makepkg.conf >> $uniondir/etc/makepkg.conf
fi

source $uniondir/etc/makepkg.conf

# Magic trickery with PKGDEST and SRCDEST, so that the built
# files end up where they're expected in the _real_ filesystem
[ -d "$uniondir/srcdest" ] || mkdir "$uniondir/srcdest"
[ -d "$uniondir/pkgdest" ] || mkdir "$uniondir/pkgdest"
[ ! -z "$PKGDEST" ] && mount --bind "$PKGDEST" "$uniondir/pkgdest"
[ ! -z "$SRCDEST" ] && mount --bind "$SRCDEST" "$uniondir/srcdest"

if ! grep "PKGDEST=/pkgdest" "$uniondir/etc/makepkg.conf" >/dev/null 2>&1; then
    echo "Setting PKGDEST in makepkg.conf"
    echo "PKGDEST=/pkgdest" >> "$uniondir/etc/makepkg.conf"
fi

if ! grep "SRCDEST=/srcdest" "$uniondir/etc/makepkg.conf" >/dev/null 2>&1; then
    echo "Setting SRCDEST in makepkg.conf"
    echo "SRCDEST=/srcdest" >> "$uniondir/etc/makepkg.conf"
fi

chown -R nobody "$uniondir/build"
chown -R nobody "$uniondir/srcdest"
chown -R nobody "$uniondir/pkgdest"

# Copy PKGBUILD and sources
source PKGBUILD
cp PKGBUILD "$uniondir/build/"
for f in ${source[@]}; do
    basef=$(basename $f)
    if [ -f "$basef" ]; then
        cp "$basef" "$uniondir/srcdest/"
    fi
done
if [ "$install" != "" -a -f "$install" ]; then
    cp "$install" "$uniondir/build/"
fi

if [ -f "ChangeLog" ]; then
    cp ChangeLog "$uniondir/build/"
fi

if ! grep "^nobody" "$uniondir/etc/sudoers" >/dev/null 2>&1; then
    echo "allowing 'nobody' sudo rights in the chroot"
    touch "$uniondir/etc/sudoers"
    echo "nobody	ALL=(ALL) NOPASSWD: ALL" >> "$uniondir/etc/sudoers"
    chmod 440 "$uniondir/etc/sudoers"
fi

#This is a little gross, but this way the script is recreated every time in the
#rw portion of the union
(cat <<EOF
#!/bin/bash
export LANG=$LOCALE
cd /build
export HOME=/build
sudo -u nobody makepkg $MAKEPKG_ARGS || touch BUILD_FAILED
EOF
) > "$uniondir/chrootbuild"
chmod +x "$uniondir/chrootbuild"

mkarchroot -r "/chrootbuild" "$uniondir"

source ${WORKDIR}/PKGBUILD
if [ -z "$(mount | grep ${chrootdir}/union/pkgdest)" ]; then
    echo "Moving completed package file to ${WORKDIR}"
    mv ${chrootdir}/union/pkgdest/${pkgname}-${pkgver}-${pkgrel}-*.pkg.tar.gz ${WORKDIR}
fi
if [ -z "$(mount | grep ${chrootdir}/union/srcdest)" ]; then
    echo "Moving downloaded source files to ${WORKDIR}"
    mv ${chrootdir}/union/srcdest/* ${WORKDIR}
fi

if [ -e ${chrootdir}/rw/build/BUILD_FAILED ]; then
    echo "Build failed, check \$CHROOT_DIR/rw/build"
    rm ${chrootdir}/rw/build/BUILD_FAILED
else
    rm -rf ${chrootdir}/rw/build/*
    echo "Build complete"
fi	


# vim:ft=sh:ts=4:sw=4:et:
