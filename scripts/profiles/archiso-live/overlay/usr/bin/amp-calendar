#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk
import string
import os
from datetime import datetime
import gobject

class DateTime:
	
	def delete_event(self):
		print "Quitting"
		gtk.main_quit()
		
	#just quits
	def cancel_event(self, widget=None):
		print "Canceling"
		self.delete_event()
	
	#saves
	def apply_event(self, widget=None):
		print "Applying"
		self.saveit()
	
	#quits the program and saves first
	def ok_event(self, widget=None):
		print "OK"
		self.apply_event()
		self.delete_event()
	
	#updates the combo/entry boxes with the times to the current h/m/s
	def update_time_entries(self):
		
		h = self.h
		m = self.m
		s = self.s
		ampm = 0 #combobox index 0=am 1=pm
		if h >= 12:
			ampm = 1
		self.cb_ampm.set_active(ampm)
		
		if h != 12:
			h = h % 12
		
		if self.hours_locked == 0:
			self.ent_hours.set_text(str(h).rjust(2,"0"))
		if self.minutes_locked == 0:
			self.ent_minutes.set_text(str(m).rjust(2,"0"))
		if self.seconds_locked == 0:
			self.ent_seconds.set_text(str(s).rjust(2,"0"))
	
	#increments the program's internal time
	def increment_time(self):
		self.s = self.s + 1
		if self.s == 60:
			self.s = 0
			self.m = self.m + 1
			if self.m == 60:
				self.m = 0
				self.h = self.h + 1
				if self.h == 24:
					self.h = 0
		#print "Time: %s:%s:%s" % (self.h, self.m, self.s)
	
	#what to do every time the timeout occurs
	def timeout_event(self):
		self.increment_time()
		self.update_time_entries()
		gobject.timeout_add(1000, self.timeout_event)
	
	#"Locks" the entrybox so that update_time_entries() does not update it and mess you up
	def lockit(self, widget=None, data=None, btn=None):
		print "Locking %s" % btn
		if btn == "hours":
			self.hours_locked = 1
		elif btn == "minutes":
			self.minutes_locked = 1
		elif btn == "seconds":
			self.seconds_locked = 1

	#unlocks the entrybox so that update_time_entries() will do its thing
	def unlockit(self, widget=None, data=None, btn=None):
		print "Unlocking %s" % btn
		if btn == "hours":
			self.hours_locked = 0
		elif btn == "minutes":
			self.minutes_locked = 0
		elif btn == "seconds":
			self.seconds_locked = 0
		
	#gets the current time specified by the entry/combo boxes and sets that as the current "internal" time
	def writeit(self, widget=None, data=None):
		if self.ent_hours.get_text() != "":
			self.h = int(self.ent_hours.get_text())
			self.m = int(self.ent_minutes.get_text())
			self.s = int(self.ent_seconds.get_text())
			
			ampm = self.cb_ampm.get_active_text()
			if ampm == "PM":
				self.h = self.h + 12
			print "Writing"

	#gets the current program time and changes the real computer time
	def saveit(self):
		(Y,M,D) = self.cal.get_date()
		Y = str(Y)
		M = str(M + 1)
		D = D
		
		h = self.h
		m = self.m
		s = self.s
		p = "AM"
		if h >= 12:
			h = h - 12
			p = "PM"
		datestr = "sudo /bin/date --set='%s-%s-%s %s:%s:%s %s'" % (Y, M, D, h, m, s, p)
		print "Saving"
		os.system(datestr)
		
	def __init__(self):
		
		#tells whether or not to update the seconds ticker
		self.seconds_locked = 0
		self.minutes_locked = 0
		self.hours_locked = 0
		
		#time starts now and is incremented manually by this program
		started_time = datetime.now()
		self.h = started_time.hour
		self.m = started_time.minute
		self.s = started_time.second
		
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_gravity(gtk.gdk.GRAVITY_SOUTH_EAST)
		width, height = self.window.get_size()
		self.window.move(gtk.gdk.screen_width() - width, gtk.gdk.screen_height() - height)
		self.window.set_title("Date & Time")
		self.window.connect("delete_event", self.delete_event)
		self.window.set_border_width(25)

		#Create a 2x2 table.  Calendar goes in cell 1-1, time goes in 1-2, buttons go in 2,2
		table = gtk.Table(2, 2, False)
		table.set_row_spacings(30)
		table.set_col_spacings(30)
		table.show()
		self.window.add(table)
		
		self.cal = gtk.Calendar()	
		table.attach(self.cal, 0, 1, 0, 1)
		self.cal.show()
		
		#surrounds the time boxes
		frame = gtk.Frame()
		frame.set_label('Time')
		table.attach(frame, 1, 2, 0, 1)
		frame.show()
		
		#table inside the frame, holds the time labels/entries
		timetable = gtk.Table(4, 2, True)
		timetable.set_col_spacings(2)
		timetable.set_row_spacings(0)
		timetable.set_border_width(10)
		frame.add(timetable)
		timetable.show()
		
		#Hour/Minutes/Seconds labels
		label = gtk.Label("Hour")
		timetable.attach(label, 0, 1, 0, 1)
		label.show()
		label = gtk.Label("Minutes")
		timetable.attach(label, 1, 2, 0, 1)
		label.show()
		label = gtk.Label("Seconds")
		timetable.attach(label, 2, 3, 0, 1)
		label.show()
		
		self.ent_hours = gtk.Entry()
		self.ent_hours.set_width_chars(1)
		self.ent_hours.connect("focus-in-event", self.lockit, "hours")
		self.ent_hours.connect("focus-out-event", self.unlockit, "hours")
		self.ent_hours.connect("key-release-event", self.writeit)
		timetable.attach(self.ent_hours, 0, 1, 1, 2)

		self.ent_minutes = gtk.Entry()
		self.ent_minutes.set_width_chars(1)
		self.ent_minutes.connect("focus-in-event", self.lockit, "minutes")
		self.ent_minutes.connect("focus-out-event", self.unlockit, "minutes")		
		self.ent_minutes.connect("key-release-event", self.writeit)
		timetable.attach(self.ent_minutes, 1, 2, 1, 2)
	
		self.ent_seconds = gtk.Entry()
		self.ent_seconds.set_width_chars(1)
		self.ent_seconds.connect("focus-in-event", self.lockit, "seconds")
		self.ent_seconds.connect("focus-out-event", self.unlockit, "seconds")
		self.ent_seconds.connect("key-release-event", self.writeit)
		timetable.attach(self.ent_seconds, 2, 3, 1, 2)

		self.cb_ampm = gtk.combo_box_new_text()
		self.cb_ampm.append_text("AM")
		self.cb_ampm.append_text("PM")
		self.cb_ampm.connect("changed", self.writeit)
		timetable.attach(self.cb_ampm, 3, 4, 1, 2)
		
		self.update_time_entries()

		self.ent_hours.show()
		self.ent_minutes.show()
		self.ent_seconds.show()
		self.cb_ampm.show()
		
		box = gtk.HBox(False, 0)
		table.attach(box, 1, 2, 1, 2)
		box.show()
		
		ok = gtk.Button(stock=gtk.STOCK_OK)
		ok.connect("clicked", self.ok_event)
		box.pack_end(ok, True, True, 0)
		ok.show()

		cancel = gtk.Button(stock=gtk.STOCK_CANCEL)
		cancel.connect("clicked", self.cancel_event)
		box.pack_end(cancel, True, True, 0)
		cancel.show()

		apply = gtk.Button(stock=gtk.STOCK_APPLY)
		apply.connect("clicked", self.apply_event)
		box.pack_end(apply, True, True, 0)
		apply.show()		
		
		gobject.timeout_add(1000, self.timeout_event)
		
		self.window.show()

	def main(self):
		gtk.main()

print __name__
if __name__ == "__main__":
	base = DateTime()
	base.main()
